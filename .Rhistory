install.packages("dplyr")
install.packages("ggplot2")
x <- 1:10
head(x)
head(x, 3)
tail(x)
tail(x, 3)
# 집합 연산
x <- 1:3
# fancy indexing
y[x>2]
# fancy indexing
y[x>2]
x <- 1:10
head(x)
head(x, 3)
tail(x)
tail(x, 3)
# 집합 연산
x <- 1:3
# fancy indexing
y[x>2]
x <- 1:10
head(x)
```{}
x <- x[x%%3==0]
x
y <- y[y%%4==0]
y
```
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
x <- c(1:100)
x[x%%3==0]
```
# 1번
```{r}
y <- c(1:100)
y[y%%4==0]
```
# 2번
```{r}
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
```
```{r}
sum(intersect(x[x%%3==0],y[y%%4==0]))
```
# 3번
```{r}
?airquality
# New York
```
# 4번
```{r}
?airquality
```
# 5번
```{r}
max(airquality$Wind)
airquality[airquality$Wind == max(airquality$Wind), c("Day")]
```
# 6번
```{r}
sum(is.na(airquality))
```
#7번
```{r}
?quakes
# Fiji
```
#8번
```{r}
max(quakes$mag)
```
knitr::opts_chunk$set(echo = TRUE)
x <- c(1:100)
x[x%%3==0]
x <- c(1:100)
x[x%%3==0]
```{r}
y <- c(1:100)
y[y%%4==0]
y <- c(1:100)
y[y%%4==0]
# 02 01문제에서 x와 y의 교집합을 구하고, 해당 교집합에 포함된 수를 모두 더한 값을 구하여라
```{r}
intersect(x, y)
```
```{r}
sum(intersect(x, y))
```
# 03 airquality 데이터는 어느 도시의 공기 질을 나타낸 데이터인가?
```{r}
# ?airquality
# Newyork
# 04 airquality 데이터의 온도 단위는 무엇인가?
```{r}
# ?airquality
# 화씨
# 05 airquality 데이터에서 바람이 가장 세게 분 날짜는 언제인가?
```{r}
max(airquality$Wind)
airquality[airquality$Wind == max(airquality$Wind), c("Day")]
```
# 06 airquality 데이터에서 총 몇 개의 NA가 포함되어 있는가?
```{r}
sum(is.na(airquality))
```
# 07 quakes 데이터는 어느 섬의 지진을 관측한 데이터인가?
```{r}
# ?quakes
# FIJI
```
08 quakes 에 기록된 가장 큰 지진의 규모는 얼마인가?
```{r}
max(quakes$mag)
x <- c(1:100)
x[x%%3==0]
x <- c(1:100)
x[x%%3==0]
# 1번
```{r}
x <- c(1:100)
x[x%%3==0]
```
# 1번
```{r}
y <- c(1:100)
y[y%%4==0]
```
# 2번
```{r}
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
```
```{r}
sum(intersect(x[x%%3==0],y[y%%4==0]))
```
# 3번
```{r}
# ?airquality
# New York
```
# 4번
```{r}
# ?airquality
# 화씨
```
# 5번
```{r}
max(airquality$Wind)
airquality[airquality$Wind == max(airquality$Wind), c("Day")]
```
# 6번
```{r}
sum(is.na(airquality))
```
#7번
```{r}
# ?quakes
# Fiji
```
#8번
```{r}
max(quakes$mag)
```
#8번
```{r}
max(quakes$mag)
```
y <- c(1:100)
y[y%%4==0]
y <- c(1:100)
y[y%%4==0]
# 1번
```{r}
x <- c(1:100)
x[x%%3==0]
```
# 1번
```{r}
y <- c(1:100)
y[y%%4==0]
```
# 2번
```{r}
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
```
```{r}
sum(intersect(x[x%%3==0],y[y%%4==0]))
```
# 3번
```{r}
# ?airquality
# New York
```
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
intersect(x[x%%3==0],y[y%%4==0])
sum(intersect(x[x%%3==0],y[y%%4==0]))
max(airquality$Wind)
airquality[airquality$Wind == max(airquality$Wind), c("Day")]
sum(is.na(airquality))
max(quakes$mag)
x <- c(1:100)
x[x%%3==0]
x <- c(1:100)
x[x%%3==0]
# 1번
```{r}
x <- c(1:100)
x[x%%3==0]
```
# 1번
```{r}
y <- c(1:100)
y[y%%4==0]
```
# 2번
```{r}
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
```
```{r}
sum(intersect(x[x%%3==0],y[y%%4==0]))
```
# 3번
```{r}
?airquality
# New York
```
]
x[x%%3==0]
x <- c(1:100)
x <- c(1:100)
x[x%%3==0]
y <- c(1:100)
y[y%%4==0]
y <- c(1:100)
y[y%%4==0]
# 1번
```{r}
x <- c(1:100)
x[x%%3==0]
```
# 1번
```{r}
y <- c(1:100)
y[y%%4==0]
```
# 2번
```{r}
x[x%%3==0]
y[y%%4==0]
intersect(x[x%%3==0],y[y%%4==0])
```
```{r}
sum(intersect(x[x%%3==0],y[y%%4==0]))
```
# 3번
```{r}
?airquality
# New York
```
max(airquality$Wind)
airquality[airquality$Wind == max(airquality$Wind), c("Day")]
sum(is.na(airquality))
max(quakes$mag)
